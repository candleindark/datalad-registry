version: "2.1"  # Compose file format v3 does not support health checks
services:
  web:
    build: .
    depends_on:
      broker:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "5000:5000"
    environment: &env
      DATALAD_REGISTRY_PASSWORD: "$DATALAD_REGISTRY_PASSWORD"
      DATALAD_REGISTRY_INSTANCE_PATH: "/app/instance"
      DATALAD_REGISTRY_DATASET_CACHE: "/app/instance/cache"
      DATALAD_REGISTRY_LOG_LEVEL: "DEBUG"

      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"

      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "$RABBITMQ_DEFAULT_PASS"

      FLASK_APP: "datalad_registry.factory:create_app"

      CELERY_BROKER_URL: "amqp://user:$RABBITMQ_DEFAULT_PASS@broker:5672"
      CELERY_RESULT_BACKEND_URL: "redis://backend:6379"

      DATALAD_REGISTRY_POSTGRES_HOST: db

    command: [sh, -c, "flask init-db && flask run --host=0.0.0.0"]
    volumes:
      - instance-data:/app/instance

  worker:
    build: .
    depends_on:
      broker:
        condition: service_healthy
      db:
        condition: service_healthy
    command: [celery, -A, datalad_registry.runcelery.celery, worker, --loglevel, DEBUG, --pool, prefork]
    volumes:
      - instance-data:/app/instance
    environment:
      <<: *env
    healthcheck:
      test: ["CMD-SHELL", "celery -A datalad_registry.runcelery.celery status --timeout 1 --json | grep -q pong"]
      interval: 5s
      timeout: 3s
      retries: 10

  scheduler:
    build: .
    depends_on:
      broker:
        condition: service_healthy
    command: [
      celery, -A, datalad_registry.runcelery.celery,
      beat,
      --loglevel, DEBUG,
      -s, /app/instance/celerybeat-schedule
    ]
    volumes:
      - instance-data:/app/instance
    environment:
      <<: *env

  broker:
    image: docker.io/rabbitmq:3-alpine
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "$RABBITMQ_DEFAULT_PASS"
    expose:
      - "5672"
    healthcheck:
      test: ["CMD", "nc", "-nvz", "127.0.0.1", "5672"]
      interval: 1s
      timeout: 3s
      retries: 30

  # Result backend for Celery
  backend:
    image: docker.io/redis:7
    expose:
      - "6379"

  db:
    image: docker.io/postgres:latest
    environment:
      POSTGRES_DB: dlreg
      POSTGRES_USER: dlreg
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_INITDB_ARGS: --encoding utf8 --locale C
    expose:
        - "5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dlreg"]
      interval: 7s
      timeout: 3s
      retries: 5


volumes:
  db-data:
  instance-data:
